datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  profileId     String   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  website       String?
  accounts      Account[]
  sessions      Session[]
  zones         Zone[]
  points        Point[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Boost         Boost[]
  zoneMemberships ZoneMember[]
  sentInvitations ZoneInvitation[] @relation("SentInvitations")
  receivedInvitations ZoneInvitation[] @relation("ReceivedInvitations")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Zone {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  subName     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  points      Point[]
  Boost       Boost[]
  members     ZoneMember[]
  invitations ZoneInvitation[]

  @@unique([name, subName])
}

model ZoneMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  zoneId    String   @db.ObjectId
  role      ZoneRole @default(COLLABORATOR)
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  zone      Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([userId, zoneId])
}

model Point {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  textContent Json?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  zoneId      String?  @db.ObjectId
  zone        Zone?    @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  subName     String?
  Boost       Boost[]
  comments    Comment[]

  @@index([title])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  pointId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  point     Point    @relation(fields: [pointId], references: [id], onDelete: Cascade)

  @@index([pointId])
  @@index([userId])
}

model Boost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Point   Point?  @relation(fields: [pointId], references: [id])
  pointId String? @db.ObjectId

  User   User?       @relation(fields: [userId], references: [id])
  userId String?     @db.ObjectId
  Zone   Zone?       @relation(fields: [zoneId], references: [id])
  zoneId String?     @db.ObjectId
  type   TypeOfBoost
}

model ZoneInvitation {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  zoneId    String        @db.ObjectId
  inviterId String        @db.ObjectId
  inviteeId String        @db.ObjectId
  status    InviteStatus  @default(PENDING)
  message   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  zone      Zone          @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  inviter   User          @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee   User          @relation("ReceivedInvitations", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@unique([zoneId, inviteeId])
}

enum TypeOfBoost {
  Boost
  Reduce
}

enum ZoneRole {
  OWNER
  COLLABORATOR
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}


